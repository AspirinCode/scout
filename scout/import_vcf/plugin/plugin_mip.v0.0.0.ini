#!/usr/bin/env python
# coding: utf-8

import configparser

config = configparser.ConfigParser(allow_no_value=True)

config.add_section('config_meta_information')
config.set('config_meta_information', '## vcf_line = where in the vcf there should be more information about this vcf record. Meta-information line, header line or data line.')
config.set('config_meta_information', '## vcf_field = type of entry in the vcf that the vcf data record belongs to. For data fields there are 8 fixed fields per record.')
config.set('config_meta_information', '## vcf_data_field = name of vcf data line field key.')
config.set('config_meta_information', '## vcf_data_field_type = vcf data line field type e.g integer, float, string.')
config.set('config_meta_information', '## vcf_data_field_number = integer that describes the number of values that can be included with the field')
config.set('config_meta_information', '## vcf_data_field_description = informative text about the vcf data line field.')
config.set('config_meta_information', '## vcf_data_field_separators = delimiter character within vcf data line field.')
config.set('config_meta_information', '## category = vcf data line field key association group e.g. allele_frequency, protein_prediction.')
config.set('config_meta_information', '## mongodb_collection = name of mongodb collection to insert vcf data line field <key>=<data>.')
config.set('config_meta_information', '## mongodb_record_key = name of mongodb record key for vcf data line field key.')
config.set('config_meta_information', '## mongodb_record_attributes = methods to apply to mongodb_record_key.')
config.set('config_meta_information', '## scout_record_key = name of scout record key for mongodb_record_key.')
config.set('config_meta_information', '## scout_record_key_alias = Display name of vcf data line field key in user view.')

config['Plug-in'] = {'name': 'mip.v0.0.0',
                     'version': '0.0.0',
                     }
config['1000GMAF'] = {'vcf_line': 'meta_information',
                      'vcf_field': 'INFO',
                      'vcf_data_field': '1000GMAF',                      
                      'vcf_data_field_type': 'float',
                      'vcf_data_field_number': '1',
                      'vcf_data_field_description': 'MAF in the 1000G database',
                      'vcf_data_field_separators': ",",
                      'category': 'allele_frequency',
                      'mongodb_collection': 'common',
                      'mongodb_record_key': '1000_genomes_maf',
                      'mongodb_record_attributes': 'index',
                      'scout_record_key': '1000_genomes_maf',
                      'scout_record_key_alias': 'ThousandGenomes',
                      }
config['DbsnpMAF'] = {'vcf_line': 'meta_information',
                      'vcf_field': 'INFO',
                      'vcf_data_field': 'DbsnpMAF',
                      'vcf_data_field_type': 'float',
                      'vcf_data_field_description': 'MAF in the DbSNP database',
                      'vcf_data_field_separators': ",",
                      'category': 'allele_frequency',
                      }
config['Dbsnp129MAF'] = {'vcf_line': 'meta_information',
                         'vcf_field': 'INFO',
                         'vcf_data_field': 'Dbsnp129MAF',
                         'vcf_data_field_type': 'float',
                         'vcf_data_field_description': 'MAF in the DbSNP database version 129',
                         'vcf_data_field_separators': ",",
                         'category': 'allele_frequency',
                         }
config['ESPMAF'] = {'vcf_line': 'meta_information',
                    'vcf_field': 'INFO',
                    'vcf_data_field': 'ESPMAF',
                    'vcf_data_field_type': 'float',
                    'vcf_data_field_description': 'MAF in the ESP database',
                    'vcf_data_field_separators': ",",
                    'category': 'allele_frequency',
                    }
config['PolyPhen'] = {'vcf_line': 'meta_information',
                      'vcf_field': 'INFO',
                      'vcf_data_field': 'PolyPhen',                      
                      'vcf_data_field_type': 'string',
                      'vcf_data_field_description': 'PolyPhen protein function prediction term',
                      'vcf_data_field_separators': ":",
                      'category': 'protein_prediction',
                      }
config['Sift'] = {'vcf_line': 'meta_information',
                  'vcf_field': 'INFO',
                  'vcf_data_field': 'Sift',
                  'vcf_data_field_type': 'string',
                  'vcf_data_field_description': 'Sift protein function prediction term',
                  'vcf_data_field_separators': ":",
                  'category': 'protein_prediction',
                  }
config['dbNSFP_MutationTaster_pred'] = {'vcf_line': 'meta_information',
                                        'vcf_field': 'INFO',
                                        'vcf_data_field': 'dbNSFP_MutationTaster_pred',
                                        'vcf_data_field_type': 'string',
                                        'vcf_data_field_description': 'MutationTaster protein function prediction term',
                                        'vcf_data_field_separators': ",",
                                        'category': 'protein_prediction',
                                        }
config['MostSevereConsequence'] = {'vcf_line': 'meta_information',
                                   'vcf_field': 'INFO',
                                   'vcf_data_field': 'MostSevereConsequence',
                                   'vcf_data_field_type': 'string',
                                   'vcf_data_field_description': 'Most severe genomic consequence',
                                   'vcf_data_field_separators': ":",
                                   'category': 'consequence',
                                   }
config['GeneticRegionAnnotation'] = {'vcf_line': 'meta_information',
                                     'vcf_field': 'INFO',
                                     'vcf_data_field': 'GeneticRegionAnnotation',
                                     'vcf_data_field_type': 'string',
                                     'vcf_data_field_description': 'Genetic region that variant falls into',
                                     'vcf_data_field_separators': ":",
                                     'category': 'consequence',
                                     }
config['HGVScp'] = {'vcf_line': 'meta_information',
                    'vcf_field': 'INFO',
                    'vcf_data_field': 'HGVScp',
                    'vcf_data_field_type': 'string',
                    'vcf_data_field_description': 'Transcript and protein functional annotation',
                    'vcf_data_field_separators': ",",
                    'category': 'consequence',
                    }
config['PASS'] = {'vcf_line': 'meta_information',
                  'vcf_field': 'FILTER',
                  'vcf_data_field': 'PASS',                  
                  'vcf_data_field_type': 'string',
                  'vcf_data_field_description': 'Passing variant call quality threshold',
                  'vcf_data_field_separators': ",",
                  'category': 'variat_call_quality',
                  }
config['dbNSFP_GERP++_RS'] = {'vcf_line': 'meta_information',
                              'vcf_field': 'INFO',
                              'vcf_data_field': 'dbNSFP_GERP++_RS',
                              'vcf_data_field_type': 'float',
                              'vcf_data_field_description': 'GERP nucleotide genomic constraint score',
                              'vcf_data_field_separators': ",",
                              'category': 'conservation',
                              }
config['dbNSFP_phastCons100way_vertebrate'] = {'vcf_line': 'meta_information',
                                               'vcf_field': 'INFO',
                                               'vcf_data_field': 'dbNSFP_phastCons100way_vertebrate',
                                               'vcf_data_field_type': 'float',
                                               'vcf_data_field_description': 'PhastCons conservation score for a sequence element',
                                               'vcf_data_field_separators': ",",
                                               'category': 'conservation',
                                               }
config['dbNSFP_phyloP100way_vertebrate'] = {'vcf_line': 'meta_information',
                                            'vcf_field': 'INFO',
                                            'vcf_data_field': 'dbNSFP_phyloP100way_vertebrate',
                                            'vcf_data_field_type': 'float',
                                            'vcf_data_field_description': 'PhyloP nucleotides or classes of nucleotides conservation score',
                                            'vcf_data_field_separators': ",",
                                            'category': 'conservation',
                                            }
config['CADD'] = {'vcf_line': 'meta_information',
                  'vcf_field': 'INFO',
                  'vcf_data_field': 'CADD',
                  'vcf_data_field_type': 'float',
                  'vcf_data_field_description': 'CADD score for quantifying the deleteriousness of single nucleotide variants as well as insertion/deletions variants in the human genome',
                  'vcf_data_field_separators': ",",
                  'category': 'deleteriousness',
                  }
config['CLNSIG'] = {'vcf_line': 'meta_information',
                    'vcf_field': 'INFO',
                    'vcf_data_field': 'CLNSIG',
                    'vcf_data_field_type': 'integer',
                    'vcf_data_field_description': 'present_in_vcf',
                    'vcf_data_field_separators': ",",
                    'category': 'clinical_significance',
                    }
config['RankScore'] = {'vcf_line': 'meta_information',
                       'vcf_field': 'INFO',
                       'vcf_data_field': 'RankScore',
                       'vcf_data_field_type': 'integer',
                       'vcf_data_field_description': 'Rank score for variant',
                       'vcf_data_field_separators': ",",
                       'category': 'rank_score',
                       }
config['Compounds'] = {'vcf_line': 'meta_information',
                       'vcf_field': 'INFO',
                       'vcf_data_field': 'Compounds',
                       'vcf_data_field_type': 'string',
                       'vcf_data_field_description': 'List of compound pairs for the variant and the pairs compound score',
                       'vcf_data_field_separators': ",",
                       'category': 'compound_score',
                       }
config['GeneticModels'] = {'vcf_line': 'meta_information',
                           'vcf_field': 'INFO',
                           'vcf_data_field': 'GeneticModels',
                           'vcf_data_field_type': 'string',
                           'vcf_data_field_description': 'Valid inheritance models for variant',
                           'vcf_data_field_separators': ",",
                           'category': 'inheritance_models',
                           }
config['ModelScore'] = {'vcf_line': 'meta_information',
                        'vcf_field': 'INFO',
                        'vcf_data_field': 'ModelScore',
                        'vcf_data_field_type': 'integer',
                        'vcf_data_field_description': 'PHRED score for genotype models',
                        'vcf_data_field_separators': ",",
                        'category': 'genotype_model_score',
                        }
config['HGNC_symbol'] = {'vcf_line': 'meta_information',
                         'vcf_field': 'INFO',
                         'vcf_data_field': 'HGNC_symbol',
                         'vcf_data_field_type': 'string',
                         'vcf_data_field_description': 'The HGNC gene symbol',
                         'vcf_data_field_separators': ",",
                         'category': 'gene_identifier',
                         }
config['Ensembl_gene_id'] = {'vcf_line': 'meta_information',
                             'vcf_field': 'INFO',
                             'vcf_data_field': 'Ensembl_gene_id',
                             'vcf_data_field_type': 'string',
                             'vcf_data_field_description': 'Ensembl gene identifier',
                             'vcf_data_field_separators': ",",
                             'category': 'gene_identifier',
                             }
config['Disease_group_pathway'] = {'vcf_line': 'meta_information',
                                   'vcf_field': 'INFO',
                                   'vcf_data_field': 'Disease_group_pathway',
                                   'vcf_data_field_type': 'string',
                                   'vcf_data_field_description': 'Disease group affected pathway',
                                   'vcf_data_field_separators': ",",
                                   'category': 'disease_description',
                                   }
config['Clinical_db_genome_build'] = {'vcf_line': 'meta_information',
                                      'vcf_field': 'INFO',
                                      'vcf_data_field': 'Clinical_db_genome_build',
                                      'vcf_data_field_type': 'string',
                                      'vcf_data_field_description': 'Genome version used in clinical Db',
                                      'vcf_data_field_separators': ",",
                                      'category': 'clinical_database',
                                      }
config['Genetic_disease_model'] = {'vcf_line': 'meta_information',
                                   'vcf_field': 'INFO',
                                   'vcf_data_field': 'Genetic_disease_model',
                                   'vcf_data_field_type': 'string',
                                   'vcf_data_field_description': 'Known disease gene inheritance model',
                                   'vcf_data_field_separators': ",",
                                   'category': 'disease_description',
                                   }
config['Clinical_db_gene_annotation'] = {'vcf_line': 'meta_information',
                                         'vcf_field': 'INFO',
                                         'vcf_data_field': 'Clinical_db_gene_annotation',
                                         'vcf_data_field_type': 'string',
                                         'vcf_data_field_description': 'Gene disease group association',
                                         'vcf_data_field_separators': ",",
                                         'category': 'disease_description',
                                         }
config['Reduced_penetrance'] = {'vcf_line': 'meta_information',
                                'vcf_field': 'INFO',
                                'vcf_data_field': 'Reduced_penetrance',
                                'vcf_data_field_type': 'string',
                                'vcf_data_field_description': 'Pathogenic gene which can exhibit reduced penetrance',
                                'vcf_data_field_separators': ",",
                                'category': 'disease_description',
                                }
config['Disease_associated_transcript'] = {'vcf_line': 'meta_information',
                                           'vcf_field': 'INFO',
                                           'vcf_data_field': 'Disease_associated_transcript',
                                           'vcf_data_field_type': 'string',
                                           'vcf_data_field_description': 'Known pathogenic transcript(s) for gene',
                                           'vcf_data_field_separators': ",",
                                           'category': 'disease_description',
                                           }

with open('mip.v0.0.0.ini', 'w') as configfile:
    config.write(configfile)
